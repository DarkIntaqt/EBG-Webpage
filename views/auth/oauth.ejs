<!DOCTYPE html>
<!--
* Tabler - Premium and Open Source dashboard template with responsive and high quality UI.
* @version 1.0.0-beta19
* @link https://tabler.io
* Copyright 2018-2023 The Tabler Authors
* Copyright 2018-2023 codecalm.net PaweÅ‚ Kuna
* Licensed under MIT (https://github.com/tabler/tabler/blob/master/LICENSE)
-->
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title data-translate="Register.Title"></title>
    <!-- CSS files -->
    <link href="<%= domain %>/dist/css/tabler.min.css?1684106062" rel="stylesheet" />
    <link href="<%= domain %>/dist/css/tabler-flags.min.css?1684106062" rel="stylesheet" />
    <link href="<%= domain %>/dist/css/tabler-payments.min.css?1684106062" rel="stylesheet" />
    <link href="<%= domain %>/dist/css/tabler-vendors.min.css?1684106062" rel="stylesheet" />
    <style>
      @import url("https://rsms.me/inter/inter.css");
      :root {
        --tblr-font-sans-serif: "Inter Var", -apple-system, BlinkMacSystemFont, San Francisco, Segoe UI, Roboto, Helvetica Neue, sans-serif;
      }
      body {
        font-feature-settings: "cv03", "cv04", "cv11";
      }
    </style>
  </head>
  <body class="d-flex flex-column">
    <script src="/appjs/format.js"></script>
    <div class="page page-center">
      <div class="container container-tight py-4">
        <div class="text-center mb-4">
          <a href="." class="navbar-brand navbar-brand-autodark"><img src="<%= domain %>/dist/logo-transparent.png" height="36" alt="" /></a>
        </div>
        <div class="card card-md">
          <div class="card-body">
            <h2 class="card-title text-center mb-4" data-translate="OAuth.Headline"></h2>
            <div class="mb-3">
              <div id="LoginLine"></div>
              <div id="ErrorLine"></div>
            </div>
            <div class="mb-3">
              <div id="PermissionsList"></div>
            </div>
            <div class="form-footer">
              <button type="submit" id="RegSubmitButton" class="btn btn-primary w-100" data-translate="OAuth.Login" style="display: none"></button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- Libs JS -->
    <!-- Tabler Core -->
    <script src="<%= domain %>/appjs/permission.js"></script>
    <script src="<%= domain %>/appjs/translate.js"></script>
    <script src="<%= domain %>/dist/js/tabler.min.js?1684106062" defer></script>
    <script src="<%= domain %>/dist/js/i18next.min.js?1684106062"></script>
    <script src="<%= domain %>/appjs/layout.js"></script>
    <script>
      i18next.on("initialized", function () {
        const url = new URL(window.location.href);
        const params = new URLSearchParams(url.search);
        if (!params.has("client_id") || !params.has("scope")) {
          const errorLine = document.getElementById("ErrorLine");
          const params = new URLSearchParams(window.location.search);
          let errorMessage = `${i18next.t("OAuth.Error")} ${i18next.t("OAuth.Missing")}`;
          let missingItems = "";

          if (!params.has("client_id")) {
            missingItems += `<li><span class="text-muted">${i18next.t("OAuth.ClientID")}</span></li>`;
          }
          if (!params.has("scope")) {
            missingItems += `<li><span class="text-muted">${i18next.t("OAuth.Scope")}</span></li>`;
          }

          if (missingItems) {
            errorMessage += `<ul>${missingItems}</ul>`;
          }

          errorLine.innerHTML = errorMessage;
        }
      });

      // Compatibility with html IDs and i18next
      const keys = {
        username: "username",
        email: "email",
        password1: "password1",
        password2: "password2",
        legal: "legal",
      };

      // When the regForm is submitted, check if the passwords match
      document.getElementById("RegSubmitButton").addEventListener("click", function () {
        const password1 = document.getElementById("password1").value;
        const password2 = document.getElementById("password2").value;
        if (password1 !== password2) {
          document.getElementById("password1").classList.add("is-invalid");
          document.getElementById("password2").classList.add("is-invalid");
          document.getElementById("ErrorLine").innerHTML = '<div class="alert alert-danger">' + i18next.t("Error.PasswordMatch") + "</div>";
          document.getElementById("RegSubmitButton").classList.toggle("btn-danger");
          setTimeout(() => {
            document.getElementById("RegSubmitButton").classList.toggle("btn-danger");
          }, 1500);
          return false;
        } else {
          document.getElementById("password1").classList.remove("is-invalid");
          document.getElementById("password2").classList.remove("is-invalid");
        }

        // Send request (fetch)
        fetch("/api/v1/register", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            username: document.getElementById("username").value,
            email: document.getElementById("email").value,
            password: password1,
            language: navigator.language,
            legal: document.getElementById("legal").checked,
          }),
        }).then(async (response) => {
          const response_json = await response.json();
          if (response.status == 200) {
            for (const key in keys) {
              document.getElementById(keys[key]).classList.remove("is-invalid");
            }
            document.getElementById("ErrorLine").innerHTML = '<div class="alert alert-success">' + i18next.t("Register.Success") + "</div>";
            document.getElementById("RegSubmitButton").classList.add("btn-success");
          } else {
            document.getElementById("RegSubmitButton").classList.toggle("btn-danger");
            setTimeout(() => {
              document.getElementById("RegSubmitButton").classList.toggle("btn-danger");
            }, 1500);
            if (response.status == 400) {
              if (typeof response_json.reason === "string") {
                document.getElementById("ErrorLine").innerHTML = '<div class="alert alert-danger">' + i18next.t(`Error.${response_json.message}`) + "</div>";
                return;
              }
              const input_name = response_json.reason[0].path[0];
              const input_type = response_json.reason[0].type;
              for (const key in keys) {
                document.getElementById(keys[key]).classList.remove("is-invalid");
              }

              document.getElementById("ErrorLine").innerHTML = '<div class="alert alert-danger">' + i18next.t(`Error.Joi.${input_type}`, { field: i18next.t(`Register.${capitalizeFirstLetter(input_name)}`), limit: response_json.reason[0].context?.limit, valids: response_json.reason[0].context?.valids?.join() }) + "</div>";
              if (input_name === "password") {
                document.getElementById("password1").classList.add("is-invalid");
                document.getElementById("password2").classList.add("is-invalid");
              } else {
                document.getElementById(keys[input_name]).classList.add("is-invalid");
              }
            } else {
              document.getElementById("ErrorLine").innerHTML = '<div class="alert alert-danger">' + i18next.t(`Register.Error.${response.status}`) + "</div>";
            }
          }
        });
      });
    </script>
  </body>
</html>
